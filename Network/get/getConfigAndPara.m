function[deltaTinSecond, deltaT, nT, numIntervals, numEns,...
    startTime, endTime, startTimeDate, unixTimeStep, FUNDAMENTAL, trueNodeRatio,...
    vmaxVar, dmaxVar, dcVar, trueNodeRatioVar, modelFirst, modelLast, populationSize,...
    samplingSize, criteria, stateNoiseGamma, measNoiseGamma, etaW, junctionSolverType,...
    numTimeSteps, samplingInterval, trueStateErrorMean, trueStateErrorVar,...
    measConfigID, measNetworkID, caliNetworkID, testingDataFolder, evolutionDataFolder,...
    sensorDataFolder, configID, T, thresholdVector] = getConfigAndPara(CONFIG,PARAMETER)

%% CONFIG info.
configID = CONFIG.configID;
measConfigID = CONFIG.measConfigID;
% disp(['will use data generated by config' num2str(measConfigID)]);
measNetworkID = CONFIG.measNetworkID;
caliNetworkID = CONFIG.caliNetworkID;
testingDataFolder = CONFIG.testingDataFolder;
evolutionDataFolder = CONFIG.evolutionDataFolder;
junctionSolverType = CONFIG.junctionSolverType;
sensorDataFolder = CONFIG.sensorDataFolder;

%% PARAMETER info.
% extracting parameter info.
T=PARAMETER.T;
deltaTinSecond = PARAMETER.deltaTinSecond;
deltaT = PARAMETER.deltaT;
nT = PARAMETER.nT;
numIntervals = PARAMETER.numIntervals;
samplingInterval=PARAMETER.samplingInterval;
numEns = PARAMETER.numEns;
% disp(['Will run with ' num2str(numEns) ' ensembles.']);
startTime = PARAMETER.startTime;
endTime = PARAMETER.endTime;
startTimeDate = PARAMETER.startTimeDate;
startString = PARAMETER.startString;
endString = PARAMETER.endString;
unixTimeStep = PARAMETER.unixTimeStep;
thresholdVector = PARAMETER.thresholdVector;
FUNDAMENTAL = PARAMETER.FUNDAMENTAL;
trueNodeRatio = PARAMETER.trueNodeRatio;
% compute number of time steps will be ran
numTimeSteps = floor(((datenum(endString)-datenum(startString))*24*3600)/deltaTinSecond);
% disp(['will run ' num2str(numTimeSteps) ' time steps']);

%ABC added===================================================================
vmaxVar = PARAMETER.vmaxVar;
dmaxVar = PARAMETER.dmaxVar;
dcVar = PARAMETER.dcVar;
trueNodeRatioVar = PARAMETER.trueNodeRatioVar;
modelFirst = PARAMETER.modelFirst;
modelLast = PARAMETER.modelLast;
populationSize = PARAMETER.populationSize;
samplingSize = PARAMETER.samplingSize;
criteria = PARAMETER.criteria;
%====================================================================

trueStateErrorMean=PARAMETER.trueStateErrorMean;
trueStateErrorVar=PARAMETER.trueStateErrorVar;
stateNoiseGamma = PARAMETER.stateNoiseGamma;
measNoiseGamma = PARAMETER.measNoiseGamma;
etaW = PARAMETER.etaW;
% disp(['parameter ', num2str(PARAMETER.parameterID), ' loaded']);

